import org.apache.avro.Schema;
import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;
import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;

import org.apache.avro.Schema;
import org.apache.avro.generic.GenericRecord;
import org.apache.avro.generic.GenericDatumReader;
import org.apache.avro.io.Decoder;
import org.apache.avro.io.DecoderFactory;
import org.apache.kafka.clients.CommonClientConfigs;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.config.SaslConfigs;
import org.apache.kafka.common.serialization.ByteArrayDeserializer;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.kafka.common.serialization.StringDeserializer;
import io.confluent.kafka.serializers.AbstractKafkaAvroSerDeConfig;
import io.confluent.kafka.serializers.KafkaAvroDeserializer;
import io.confluent.kafka.serializers.KafkaAvroDeserializerConfig;

import java.time.Duration;
import java.util.Collections;
import java.util.Properties;

public class KafkaAvroConsumerProducer {

    public static void main(String[] args) {
        Properties consumerProps = new Properties();
        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "<bootstrap_servers>");
        consumerProps.put(ConsumerConfig.GROUP_ID_CONFIG, "avro-consumer");
        consumerProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        consumerProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class.getName());
        consumerProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");

        // SASL PLAINTEXT with GSSAPI (Kerberos) configuration
        consumerProps.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, "SASL_PLAINTEXT");
        consumerProps.put(SaslConfigs.SASL_MECHANISM, "GSSAPI");

        // Schema Registry configuration
        consumerProps.put(AbstractKafkaAvroSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG, "<schema_registry_url>");
        consumerProps.put(KafkaAvroDeserializerConfig.SPECIFIC_AVRO_READER_CONFIG, true);

        KafkaConsumer<String, byte[]> consumer = new KafkaConsumer<>(consumerProps);
        consumer.subscribe(Collections.singletonList("source_topic"));

        Properties producerProps = new Properties();
        producerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "<bootstrap_servers>");
        producerProps.put(AbstractKafkaAvroSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG, "<schema_registry_url>");

        try (KafkaConsumer<String, byte[]> sourceConsumer = consumer;
             KafkaProducer<String, GenericRecord> producer = new KafkaProducer<>(producerProps)) {

            int messagesToRead = 100;
            int messagesRead = 0;

            while (messagesRead < messagesToRead) {
                ConsumerRecords<String, byte[]> records = sourceConsumer.poll(Duration.ofMillis(100));
                for (ConsumerRecord<String, byte[]> record : records) {
                    Schema schema = SchemaRegistryUtil.getSchemaFromRegistry(record.value(), "<schema_registry_url>");
                    GenericDatumReader<GenericRecord> reader = new GenericDatumReader<>(schema);
                    Decoder decoder = DecoderFactory.get().binaryDecoder(record.value(), null);
                    GenericRecord message = reader.read(null, decoder);
                    producer.send(new ProducerRecord<>("dest_topic", message));
                    messagesRead++;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static class SchemaRegistryUtil {
        static Schema getSchemaFromRegistry(byte[] data, String registryUrl) {
            // Code to fetch schema from Schema Registry
            // You can use any Schema Registry client library to fetch schema
            // For example, Confluent's Schema Registry client or Apache Avro's own client
            return null; // Replace with actual implementation
        }
    }
}


public class SchemaRegistryUtil {
    
    private static SchemaRegistryClient schemaRegistryClient;

    static {
        String schemaRegistryUrl = "<schema_registry_url>"; // Replace with your actual Schema Registry URL
        schemaRegistryClient = new CachedSchemaRegistryClient(schemaRegistryUrl, 100);
    }

    public static Schema getSchemaFromRegistry(byte[] data, String registryUrl) {
        int schemaId = getSchemaIdFromData(data);
        return getSchemaById(schemaId);
    }

    private static int getSchemaIdFromData(byte[] data) {
        // Extract schema id from the Avro message data
        // Schema id is usually the first 4 bytes in the Avro message payload
        return ((data[0] & 0xFF) << 24) | ((data[1] & 0xFF) << 16) |
                ((data[2] & 0xFF) << 8) | (data[3] & 0xFF);
    }

    private static Schema getSchemaById(int schemaId) {
        try {
            return schemaRegistryClient.getById(schemaId);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}
